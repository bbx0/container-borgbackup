# Default to Debian 11 (bullseye) as base image, which is the platform for the latest BorgBackup standalone binary release
# (always use latest version of the base image to include all security updates)
ARG distroless_image=gcr.io/distroless/base-debian11:latest
ARG debian_image=docker.io/library/debian:11-slim

# BorgBackup target version is a mandatory parameter (e.g. 1.2.1 or 2.0.0a4)
ARG version
# variant for amd64: "", "new" -> borg-linux64, borg-linuxnew64
ARG borg_linux_amd64_variant=""

## Multiarch
# Setup multiarch parameters via specific platform-* stages

# Stage: platform
# Generic vars for all platforms
FROM ${debian_image} as platform

# Stage: platform-linux-amd64
# Official BorgBackup releases for x64 architectures
FROM platform as platform-linux-amd64
ARG version
ARG borg_linux_amd64_variant
# Signing Key: Thomas Waldmann <tw@waldmann-edv.de>
ENV public_key_url=https://keys.openpgp.org/vks/v1/by-fingerprint/6D5BEF9ADD2075805747B70F9F88FB52FAF7B393
ENV archive_url=https://github.com/borgbackup/borg/releases/download/${version}/borg-linux${borg_linux_amd64_variant}64

# Stage: platform-linux-arm
# Community releases by bauerj for ARM architectures
FROM platform as platform-linux-arm
ARG version
ARG TARGETVARIANT
# Signing Key: Borg Binary Builder <borg-binary-builder@noplanman.ch>
ENV public_key_url=https://keys.openpgp.org/vks/v1/by-fingerprint/C69CE861DFA4BDEFBE9C240110AFCBC9A96A45C9
ENV archive_url=https://borg.bauerj.eu/bin/borg-${version}-arm${TARGETVARIANT}

# Stage: platform-linux-arm64
FROM platform-linux-arm as platform-linux-arm64
ENV archive_url=https://borg.bauerj.eu/bin/borg-${version}-arm64

## Download
# Download and verify the binary with the pgp key

# Stage: download-borgbackup
# Using ADD (instead of curl) enables native buildkit caching via etag
FROM platform-${TARGETOS}-${TARGETARCH} as download-borgbackup
ARG version
WORKDIR /tmp
ADD --chmod=755 ${archive_url} borg
ADD ${archive_url}.asc borg.asc
ADD ${public_key_url} public_key.asc

# Stage: verify-borgbackup
# Install sqv in a dedicated stage to allow native execution on buildplatform
# sqv only exits with 0 if everything is valid
FROM --platform=$BUILDPLATFORM ${debian_image} as verify-borgbackup
ARG version
WORKDIR /tmp
RUN \
    export DEBIAN_FRONTEND=noninteractive; \
    apt-get -y -qq update && \ 
    apt-get -y -qq --no-install-recommends install sqv
COPY --from=download-borgbackup /tmp .
RUN sqv borg.asc borg --keyring public_key.asc

# Stage: test-borgbackup
# Execute the binary once on target platform
FROM ${debian_image} as test-borgbackup
ARG version
WORKDIR /tmp
COPY --from=verify-borgbackup /tmp .
RUN ./borg --version | tee version && \
    grep --silent --fixed-strings "borg ${version}" version

# Stage: download-dependencies
# Download and extract deb packages for BorgBackup runtime dependencies into /dpkg
#  - zlib1g: provides libz.so.1 required by borg binary
#  - libcrypt1: provides libcrypt.so.1 required for versions pre borg-linuxnew64 1.2.1
#  - openssh-client: required for BORG_RSH
# (Ref to: https://github.com/GoogleContainerTools/distroless/issues/863)
FROM ${debian_image} as download-dependencies
WORKDIR /var/cache/apt/archives
RUN \
    export DEBIAN_FRONTEND=noninteractive; \
    apt-get -y -qq update && \
    apt-get -y -qq --download-only --no-install-recommends --reinstall install \
    zlib1g \
    libcrypt1 \
    openssh-client libselinux1 libgssapi-krb5-2 libpcre2-8-0 libkrb5-3 libk5crypto3 libcom-err2 libkrb5support0 libkeyutils1 && \ 
    mkdir -p /dpkg/var/lib/dpkg/status.d && \
    for deb in *.deb; do \
    package_name=$(dpkg-deb -I ${deb} | awk '/^ Package: .*$/ {print $2}'); \
    dpkg --ctrl-tarfile $deb | tar -Oxf - ./control > /dpkg/var/lib/dpkg/status.d/${package_name}; \
    dpkg --extract $deb /dpkg || exit 10; \
    done

## Build distroless image

# Stage: make-distroless
# Copy the runtime dependencies into the distroless image
# Copy the borg binaries into the distroless image
# Execute the binaries to check if all dependencies are fullfilled
FROM ${distroless_image} as make-distroless
COPY --from=download-dependencies ["/dpkg", "/"]
COPY --from=test-borgbackup ["/tmp/borg", "/usr/local/bin/borg"]

# Stage: test-distroless
# Execute the binaries to check if all dependencies are fullfilled
FROM make-distroless as test-distroless
RUN ["/usr/local/bin/borg", "--version"]
RUN ["/usr/bin/ssh", "-V"]

# Stage: final
# Final image with annotations and proper defaults
# - Set BORG_BASE_DIR to /borg to serve as volume/mountpoint for data persistence (e.g. when rootfs is mounted read-only)
# - Set entrypoint to /usr/local/bin/borg
# Labels: https://github.com/opencontainers/image-spec/blob/main/annotations.md
FROM test-distroless as final
ARG version
ARG distroless_image
ENV BORG_BASE_DIR=/borg
VOLUME /borg
ENTRYPOINT ["/usr/local/bin/borg"]
LABEL \
    description="BorgBackup is a deduplicating backup program with support for compression and authenticated encryption." \
    vendor="BorgBackup Community (unofficial)" \
    version=${version} \
    author="39773919+bbx0@users.noreply.github.com" \
    org.opencontainers.image.title="BorgBackup" \
    org.opencontainers.image.description="BorgBackup is a deduplicating backup program, which supports compression and authenticated encryption." \
    org.opencontainers.image.licenses="BSD-3-Clause" \
    org.opencontainers.image.vendor="BorgBackup Community (unofficial)" \
    org.opencontainers.image.version=${version} \
    org.opencontainers.image.source="https://github.com/bbx0/container-borgbackup" \
    org.opencontainers.image.authors="39773919+bbx0@users.noreply.github.com" \
    org.opencontainers.image.base.name=${distroless_image}
