# syntax=docker.io/docker/dockerfile:1

# Convert borgbackup container into a "distroless" variant
ARG version
ARG borg_image=ghcr.io/bbx0/borgbackup:${version}
ARG distroless_image=gcr.io/distroless/base-debian12

ARG BORG_VERSION=${version}
ARG BORG_BASE_DIR=/borg
ARG BORG_FUSE_IMPL=none
ARG PIP_CACHE_DIR=/var/local/cache/borg-${BORG_VERSION}-distroless/${TARGETARCH}${TARGETVARIANT}/pip
ARG PIP_DISABLE_PIP_VERSION_CHECK=1
ARG PIP_ROOT_USER_ACTION=ignore

### Build stage ###
FROM ${borg_image} as pyinstaller

# Install OS build dependencies 
ARG DEBIAN_FRONTEND=noninteractive
RUN --mount=type=tmpfs,target=/var/cache/apt --mount=type=tmpfs,target=/var/lib/apt \
  apt-get -y -qq update && \ 
  apt-get -y -qq --no-install-recommends install \
  build-essential zlib1g-dev

# Package: pyinstaller (allow compile from source for support all TARGETARCHs)
ARG PYINSTALLER_COMPILE_BOOTLOADER=true
ARG PIP_CACHE_DIR PIP_DISABLE_PIP_VERSION_CHECK PIP_ROOT_USER_ACTION
RUN --mount=type=cache,target=${PIP_CACHE_DIR} \
  pip install pyinstaller

# Package: BorgBackup with pyinstaller in "one dir" variant (avoids unpackaging borg at runtime)
WORKDIR /pyinstaller
RUN pyinstaller --log-level ERROR --onedir --noupx --noconfirm --clean --name borg.exe --collect-submodules borg --collect-data borg --collect-binaries borg --recursive-copy-metadata borgbackup /usr/local/bin/borg

### dpkg stage: (Download and extract runtime dependencies https://github.com/GoogleContainerTools/distroless/issues/863)
FROM ${borg_image} as dpkg
ARG DPKG_PYINSTALLER="zlib1g"
ARG DPKG_OPENSSH="openssh-client zlib1g libselinux1 libgssapi-krb5-2 libpcre2-8-0 libkrb5-3 libk5crypto3 libcom-err2 libkrb5support0 libkeyutils1"
ARG DEBIAN_FRONTEND=noninteractive
WORKDIR /var/cache/apt/archives
RUN --mount=type=tmpfs,target=/var/cache/apt --mount=type=tmpfs,target=/var/lib/apt \
  apt-get -y -qq update && \ 
  apt-get -y -qq --download-only --no-install-recommends --reinstall install ${DPKG_PYINSTALLER} ${DPKG_OPENSSH} && \
  mkdir -p /dpkg/var/lib/dpkg/status.d && \
  for deb in *.deb; do \
  package_name=$(dpkg-deb -I ${deb} | awk '/^ Package: .*$/ {print $2}'); \
  dpkg --ctrl-tarfile $deb | tar -Oxf - ./control > /dpkg/var/lib/dpkg/status.d/${package_name}; \
  dpkg --extract $deb /dpkg || exit 10; \
  done

### rootfs stage (squash everything into one layer) ####
FROM scratch as rootfs
COPY --from=pyinstaller ["/pyinstaller/dist/borg.exe","/opt/borg"]
COPY --from=dpkg ["/dpkg","/"]
COPY --from=dpkg ["/bin/cat","/bin/cat"]

### test stage (check that the binaries execute) ####
FROM ${distroless_image} AS test
COPY --from=rootfs ["/","/"]
RUN ["ssh", "-V"]
RUN ["/opt/borg/borg.exe", "debug", "info", "--debug"]
RUN ["/bin/cat", "--version"]

# Final stage (publish target image)
FROM ${distroless_image} AS final
ARG distroless_image

# Persist ENV into image
ARG BORG_BASE_DIR BORG_FUSE_IMPL BORG_VERSION
ENV BORG_BASE_DIR=${BORG_BASE_DIR} BORG_FUSE_IMPL=${BORG_FUSE_IMPL} BORG_VERSION=${BORG_VERSION} PYTHONUNBUFFERED=1
VOLUME /borg

COPY --from=rootfs ["/","/"]

ENTRYPOINT ["/opt/borg/borg.exe"]

# Labeling https://github.com/opencontainers/image-spec/blob/main/annotations.md
LABEL\
  org.opencontainers.image.title="BorgBackup" \
  org.opencontainers.image.description="BorgBackup is a deduplicating backup program with support for compression and authenticated encryption." \
  org.opencontainers.image.licenses="BSD-3-Clause" \
  org.opencontainers.image.vendor="BorgBackup Community (unofficial)" \
  org.opencontainers.image.version=${BORG_VERSION} \
  org.opencontainers.image.source="https://github.com/bbx0/container-borgbackup" \
  org.opencontainers.image.authors="39773919+bbx0@users.noreply.github.com" \
  org.opencontainers.image.base.name=${distroless_image}