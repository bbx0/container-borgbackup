# syntax=docker.io/docker/dockerfile:1

# Convert borgbackup container into a "distroless" variant
ARG version
ARG borg_image=ghcr.io/bbx0/borgbackup:${version}
ARG distroless_image=gcr.io/distroless/base-debian11

# the pyinstaller bootloader is architecture specific but the wheel is marked as "any" (use a cache dir per ARCH)
ARG PIP_CACHE_DIR=/var/local/cache/pip/${TARGETARCH}${TARGETVARIANT}
ARG APT_CACHE_ID=apt-cache-${TARGETARCH}${TARGETVARIANT}

### Build stage ###

FROM ${borg_image} as pyinstaller

# Build: Install OS build dependencies (and cache APT across builds) 
ARG DEBIAN_FRONTEND=noninteractive APT_CACHE_ID
RUN --mount=type=cache,id=pyinstaller-${APT_CACHE_ID},target=/var/cache/apt,sharing=locked --mount=type=cache,id=pyinstaller-${APT_CACHE_ID}-lib,target=/var/lib/apt,sharing=locked \
  rm -f /etc/apt/apt.conf.d/docker-clean && \
  echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache && \
  apt-get -y -qq update && \ 
  apt-get -y -qq --no-install-recommends install \
  build-essential zlib1g-dev

# Package: pyinstaller
# - Force pyinstaller to compile from source to compile a bootloader for the TARGETARCH
ARG PYINSTALLER_COMPILE_BOOTLOADER=true
ARG PIP_NO_BINARY=:all: PIP_USE_FEATURE=no-binary-enable-wheel-cache PIP_ROOT_USER_ACTION=ignore PIP_DISABLE_PIP_VERSION_CHECK=1 PIP_CACHE_DIR
RUN --mount=type=cache,target=${PIP_CACHE_DIR} \
  pip install no-manylinux && \
  pip wheel --wheel-dir=/tmp/wheels pyinstaller && \
  pip install --no-index --no-cache-dir --find-links=/tmp/wheels --only-binary=:all: pyinstaller

# Package: BorgBackup with pyinstaller in "one dir" variant (avoids unpackaging borg at runtime)
WORKDIR /pyinstaller
RUN pyinstaller --log-level ERROR --onedir --strip --noupx --noconfirm --clean --name borg.exe --collect-submodules borg --collect-data borg --collect-binaries borg --recursive-copy-metadata borgbackup /usr/local/bin/borg

# Download and extract runtime dependencies via APT
# (Ref to: https://github.com/GoogleContainerTools/distroless/issues/863)
FROM ${borg_image} as dpkg
ARG DPKG_PYINSTALLER="zlib1g"
ARG DPKG_OPENSSH="openssh-client zlib1g libselinux1 libgssapi-krb5-2 libpcre2-8-0 libkrb5-3 libk5crypto3 libcom-err2 libkrb5support0 libkeyutils1"
ARG DEBIAN_FRONTEND=noninteractive APT_CACHE_ID
WORKDIR /var/cache/apt/archives
RUN --mount=type=cache,id=dpkg-${APT_CACHE_ID},target=/var/cache/apt,sharing=locked --mount=type=cache,id=dpkg-${APT_CACHE_ID}-lib,target=/var/lib/apt,sharing=locked \
  rm -f /etc/apt/apt.conf.d/docker-clean && \
  echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache && \
  apt-get -y -qq update && \ 
  apt-get -y -qq --download-only --no-install-recommends --reinstall install ${DPKG_PYINSTALLER} ${DPKG_OPENSSH} && \
  mkdir -p /dpkg/var/lib/dpkg/status.d && \
  for deb in *.deb; do \
  package_name=$(dpkg-deb -I ${deb} | awk '/^ Package: .*$/ {print $2}'); \
  dpkg --ctrl-tarfile $deb | tar -Oxf - ./control > /dpkg/var/lib/dpkg/status.d/${package_name}; \
  dpkg --extract $deb /dpkg || exit 10; \
  done

### distroless stage (publish "distroless" variant) ####

FROM scratch as rootfs
COPY --from=pyinstaller ["/pyinstaller/dist/borg.exe","/opt/borg"]
COPY --from=dpkg ["/dpkg","/"]
COPY --from=pyinstaller ["/bin/cat","/bin/cat"]

# use --target test to verify the binaries work
FROM ${distroless_image} AS test
COPY --from=rootfs ["/","/"]
RUN ["ssh", "-V"]
RUN ["/opt/borg/borg.exe", "debug", "info", "--debug"]
RUN ["/bin/cat", "--version"]

# Final stage
FROM ${distroless_image} AS distroless
ARG version
ENV BORG_VERSION=${version} BORG_FUSE_IMPL=none BORG_BASE_DIR=/borg
VOLUME /borg

COPY --from=rootfs ["/","/"]

ENTRYPOINT ["/opt/borg/borg.exe"]

# Labeling https://github.com/opencontainers/image-spec/blob/main/annotations.md
LABEL\
  org.opencontainers.image.title="BorgBackup" \
  org.opencontainers.image.description="BorgBackup is a deduplicating backup program with support for compression and authenticated encryption." \
  org.opencontainers.image.licenses="BSD-3-Clause" \
  org.opencontainers.image.vendor="BorgBackup Community (unofficial)" \
  org.opencontainers.image.version=${version} \
  org.opencontainers.image.source="https://github.com/bbx0/container-borgbackup" \
  org.opencontainers.image.authors="39773919+bbx0@users.noreply.github.com" \
  org.opencontainers.image.base.name=${distroless_image}