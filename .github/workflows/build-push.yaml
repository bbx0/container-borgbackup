name: Build and Push BorgBackup Container Image

on:
  workflow_call:
    inputs:
      borg_version:
        description: "BorgBackup major.minor version to build (e.g. 1.1 or 2.0)"
        type: string
        required: true
      prerelease:
        description: "Allow building of prerelease"
        type: boolean
        default: false
      base_image:
        description: "The base image to build an publish on."
        type: string
        default: "docker.io/python:3-slim-bullseye"
      tag_major_minor:
        description: "Assign {major} and {major}.{minor} tags to the image. (e.g. :1 or :1.2)"
        type: boolean
        default: true
  workflow_dispatch:
    inputs:
      borg_version:
        description: "BorgBackup major.minor version to build (e.g. 1.1 or 2.0)"
        type: string
        required: true
      prerelease:
        description: "Allow building of prerelease"
        type: boolean
        default: false
      base_image:
        description: "The base image to build an publish on."
        type: string
        default: "docker.io/python:3-slim-bullseye"
      tag_major_minor:
        description: "Assign {major} and {major}.{minor} tags to the image. (e.g. :1 or :1.2)"
        type: boolean
        default: true

env:
  IMAGE: ghcr.io/${{ github.repository_owner }}/borgbackup

jobs:
  prepare:
    name: Get BorgBackup target version
    runs-on: ubuntu-latest
    outputs:
      BORG_VERSION: ${{ steps.version.outputs.BORG_VERSION }}
    steps:
      - id: version
        name: Get BorgBackup target release
        shell: bash
        run: |
          BORG_VERSION=$(curl --fail --silent --location https://api.github.com/repos/borgbackup/borg/releases | jq -r 'map(select(.tag_name | startswith("${{ inputs.borg_version }}")))|map(select(.prerelease==${{ inputs.prerelease }} and .draft==false))|max_by(.published_at).tag_name') &&
          echo "BORG_VERSION=${BORG_VERSION}" >> $GITHUB_OUTPUT
  build-push:
    name: Build and Push BorgBackup Container Image
    needs: prepare
    env:
      BORG_VERSION: ${{ needs.prepare.outputs.BORG_VERSION }}
    outputs:
      # Workaround as collecting job output is tedious
      IMAGES: |
        ${{ env.IMAGE }}:${{ env.BORG_VERSION }}-amd64 \
        ${{ env.IMAGE }}:${{ env.BORG_VERSION }}-arm64 \
        ${{ env.IMAGE }}:${{ env.BORG_VERSION }}-armv7 \
        ${{ env.IMAGE }}:${{ env.BORG_VERSION }}-ppc64le \
        ${{ env.IMAGE }}:${{ env.BORG_VERSION }}-s390x \
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            name: ${{ env.IMAGE }}:${{ env.BORG_VERSION }}-amd64
          - platform: linux/arm64
            name: ${{ env.IMAGE }}:${{ env.BORG_VERSION }}-arm64
          - platform: linux/arm/v7
            name: ${{ env.IMAGE }}:${{ env.BORG_VERSION }}-armv7
          - platform: linux/ppc64le
            name: ${{ env.IMAGE }}:${{ env.BORG_VERSION }}-ppc64le
          - platform: linux/s390x
            name: ${{ env.IMAGE }}:${{ env.BORG_VERSION }}-s390x
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          pull: true
          push: true
          tags: ${{ matrix.name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ matrix.platform }}
          build-args: |
            version=${{ env.BORG_VERSION }}
            base_image=${{ inputs.base_image }}
  manifest:
    name: Create multiarch manifest
    needs:
      - prepare
      - build-push
    env:
      BORG_VERSION: ${{ needs.prepare.outputs.BORG_VERSION }}
      PLATFORM_IMAGES: ${{ needs.build-push.outputs.IMAGES }}
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push manifest
        run: |
          [ "${{ inputs.tag_major_minor }}" = "true" ] \
            && TAG_MAJOR_MINOR = "--tag ${{ env.IMAGE }}:${{ inputs.borg_version }}" \
            || TAG_MAJOR_MINOR = ""; \
          docker buildx imagetools create \
            --tag ${{ env.IMAGE }}:${{ env.BORG_VERSION }} \
            ${TAG_MAJOR_MINOR} \
            ${{ env.PLATFORM_IMAGES }}
