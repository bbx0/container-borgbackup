name: Build and Push BorgBackup Container Image
concurrency: build-push

on:
  workflow_call:
    inputs:
      borg_version:
        description: 'BorgBackup major.minor version to build (e.g. 1.1 or 2.0)'
        type: string
        required: true        
      prerelease:
        description: 'Allow building of prerelease'
        type: boolean
        default: false
      base_image:
        description: 'The base image to build an publish on.'
        type: string
        default: "docker.io/python:3-slim-bullseye"
      tag_major_minor:
        description: 'Assign {major} and {major}.{minor} tags to the image. (e.g. :1 or :1.2)'
        type: boolean
        default: true
  workflow_dispatch:
    inputs:
      borg_version:
        description: 'BorgBackup major.minor version to build (e.g. 1.1 or 2.0)'
        type: string
        required: true        
      prerelease:
        description: 'Allow building of prerelease'
        type: boolean
        default: false
      base_image:
        description: 'The base image to build an publish on.'
        type: string
        default: "docker.io/python:3-slim-bullseye"
      tag_major_minor:
        description: 'Assign {major} and {major}.{minor} tags to the image. (e.g. :1 or :1.2)'
        type: boolean
        default: true

jobs:
  build-push:
    name: Build and Push BorgBackup Container Image
    runs-on: ubuntu-latest
    steps:
      - 
        name: Get BorgBackup target release
        shell: bash
        run: |
          BORG_VERSION=$(curl --fail --silent --location https://api.github.com/repos/borgbackup/borg/releases | jq -r 'map(select(.tag_name | startswith("${{ inputs.borg_version }}")))|map(select(.prerelease==${{ inputs.prerelease }} and .draft==false))|max_by(.published_at).tag_name') &&
          echo "BORG_VERSION=${BORG_VERSION}" >> $GITHUB_ENV
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          github-token: ${{ github.token }}
          images: ghcr.io/${{ github.repository_owner }}/borgbackup
          flavor: |
            latest=false
          tags: |
            type=pep440,pattern={{version}},value=${{ env.BORG_VERSION }}
            type=pep440,pattern={{major}}.{{minor}},value=${{ env.BORG_VERSION }},enable=${{ inputs.tag_major_minor }}
            type=pep440,pattern={{major}},value=${{ env.BORG_VERSION }},enable=${{ inputs.tag_major_minor }}
          labels: |
            org.opencontainers.image.title="BorgBackup"
            org.opencontainers.image.description="BorgBackup is a deduplicating backup program with support for compression and authenticated encryption."
            org.opencontainers.image.licenses="BSD-3-Clause"
            org.opencontainers.image.vendor="BorgBackup Community (unofficial)"
            org.opencontainers.image.version="${{ env.BORG_VERSION }}"
            org.opencontainers.image.source="https://github.com/bbx0/container-borgbackup"
            org.opencontainers.image.authors="39773919+bbx0@users.noreply.github.com"
            org.opencontainers.image.base.name="${{ inputs.base_image }}"
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          file: Containerfile
          pull: true
          push: true
          tags:  ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: "linux/amd64,linux/arm64,linux/arm/v7"
          build-args: |
            version=${{ env.BORG_VERSION }}
            base_image=${{ inputs.base_image }}