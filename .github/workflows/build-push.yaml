name: Build and Push BorgBackup Container Image

on:
  workflow_call:
    inputs:
      borg_version:
        description: "BorgBackup major.minor version to build (e.g. 1.1 or 2.0)"
        type: string
        required: true
      prerelease:
        description: "Allow building of prerelease"
        type: boolean
        default: false
      base_image:
        description: "The base image to build and publish on."
        type: string
        default: "docker.io/python:3-slim-bullseye"
      distroless_image:
        description: "The distroless image to distribute on."
        type: string
        default: "gcr.io/distroless/base-debian11"
      tag_major_minor:
        description: "Assign {major} and {major}.{minor} tags to the image. (e.g. :1 or :1.2)"
        type: boolean
        default: true
  workflow_dispatch:
    inputs:
      borg_version:
        description: "BorgBackup major.minor version to build (e.g. 1.1 or 2.0)"
        type: string
        required: true
      prerelease:
        description: "Allow building of prerelease"
        type: boolean
        default: false
      base_image:
        description: "The base image to build and publish on."
        type: string
        default: "docker.io/python:3-slim-bullseye"
      distroless_image:
        description: "The distroless image to distribute on."
        type: string
        default: "gcr.io/distroless/base-debian11"
      tag_major_minor:
        description: "Assign {major} and {major}.{minor} tags to the image. (e.g. :1 or :1.2)"
        type: boolean
        default: true

jobs:
  prepare:
    name: Get BorgBackup target version
    runs-on: ubuntu-latest
    outputs:
      BORG_VERSION: ${{ steps.version.outputs.BORG_VERSION }}
      IMAGE_GHCR: ghcr.io/${{ github.repository_owner }}/borgbackup
      IMAGE_DOCKER: docker.io/${{ github.repository_owner }}/borgbackup
    steps:
      - id: version
        name: Get BorgBackup target release
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BORG_VERSION=$(gh api repos/borgbackup/borg/releases --jq 'map(select(.draft==false and .prerelease==${{ inputs.prerelease }} and (.tag_name | startswith("${{ inputs.borg_version }}"))))|max_by(.published_at).tag_name') &&
          [ -n "${BORG_VERSION}" ] && echo "BORG_VERSION=${BORG_VERSION}" >> $GITHUB_OUTPUT
  build-push:
    name: Build and Push BorgBackup Container Image in GHCR
    needs: prepare
    env:
      BORG_VERSION: ${{ needs.prepare.outputs.BORG_VERSION }}
      IMAGE: ${{ needs.prepare.outputs.IMAGE_GHCR }}
    outputs:
      # Workaround as collecting job output is tedious
      IMAGES: >-
        ${{ env.IMAGE }}:${{ env.BORG_VERSION }}-amd64
        ${{ env.IMAGE }}:${{ env.BORG_VERSION }}-arm64
        ${{ env.IMAGE }}:${{ env.BORG_VERSION }}-armv7
        ${{ env.IMAGE }}:${{ env.BORG_VERSION }}-ppc64le
        ${{ env.IMAGE }}:${{ env.BORG_VERSION }}-s390x
      DISTROLESS_IMAGES: >-
        ${{ env.IMAGE }}:${{ env.BORG_VERSION }}-amd64-distroless
        ${{ env.IMAGE }}:${{ env.BORG_VERSION }}-arm64-distroless
        ${{ env.IMAGE }}:${{ env.BORG_VERSION }}-armv7-distroless
        ${{ env.IMAGE }}:${{ env.BORG_VERSION }}-ppc64le-distroless
        ${{ env.IMAGE }}:${{ env.BORG_VERSION }}-s390x-distroless
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            suffix: -amd64
          - platform: linux/arm64
            suffix: -arm64
          - platform: linux/arm/v7
            suffix: -armv7
          - platform: linux/ppc64le
            suffix: -ppc64le
          - platform: linux/s390x
            suffix: -s390x
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          pull: true
          push: true
          tags: "${{ env.IMAGE }}:${{ env.BORG_VERSION }}${{ matrix.suffix }}"
          cache-from: type=gha,scope=borgbackup-${{ env.BORG_VERSION }}${{ matrix.suffix }}
          cache-to: type=gha,scope=borgbackup-${{ env.BORG_VERSION }}${{ matrix.suffix }},mode=max
          platforms: ${{ matrix.platform }}
          build-args: |
            version=${{ env.BORG_VERSION }}
            base_image=${{ inputs.base_image }}
          # Prevent manifest creation instead of an image for a single platform (https://github.com/docker/build-push-action/issues/755)
          provenance: false
      - name: Build and self-test (distroless)
        uses: docker/build-push-action@v5
        with:
          file: Dockerfile.distroless
          target: test
          pull: true
          outputs: type=cacheonly
          cache-from: |
            type=gha,scope=borgbackup-${{ env.BORG_VERSION }}${{ matrix.suffix }}-distroless-selftest
          cache-to: |
            type=gha,scope=borgbackup-${{ env.BORG_VERSION }}${{ matrix.suffix }}-distroless-selftest,mode=max
          platforms: ${{ matrix.platform }}
          build-args: |
            version=${{ env.BORG_VERSION }}
            borg_image=${{ env.IMAGE }}:${{ env.BORG_VERSION }}${{ matrix.suffix }}
            distroless_image=${{ inputs.distroless_image }}
          # Prevent manifest creation instead of an image for a single platform (https://github.com/docker/build-push-action/issues/755)
          provenance: false
      - name: Build and push (distroless)
        uses: docker/build-push-action@v5
        with:
          file: Dockerfile.distroless
          pull: true
          push: true
          tags: "${{ env.IMAGE }}:${{ env.BORG_VERSION }}${{ matrix.suffix }}-distroless"
          cache-from: |
            type=gha,scope=borgbackup-${{ env.BORG_VERSION }}${{ matrix.suffix }}-distroless-selftest
            type=gha,scope=borgbackup-${{ env.BORG_VERSION }}${{ matrix.suffix }}-distroless
          cache-to: |
            type=gha,scope=borgbackup-${{ env.BORG_VERSION }}${{ matrix.suffix }}-distroless,mode=max
          platforms: ${{ matrix.platform }}
          build-args: |
            version=${{ env.BORG_VERSION }}
            borg_image=${{ env.IMAGE }}:${{ env.BORG_VERSION }}${{ matrix.suffix }}
            distroless_image=${{ inputs.distroless_image }}
          # Prevent manifest creation instead of an image for a single platform (https://github.com/docker/build-push-action/issues/755)
          provenance: false
  manifest:
    name: Create multiarch manifest in registries
    needs:
      - prepare
      - build-push
    env:
      # Borg version tag (e.g. borgbackup:1.2.2 / borgbackup:1.2.2-distroless)
      TAGS: >-
        --tag ${{ needs.prepare.outputs.IMAGE_GHCR }}:${{ needs.prepare.outputs.BORG_VERSION }}
        --tag ${{ needs.prepare.outputs.IMAGE_DOCKER }}:${{ needs.prepare.outputs.BORG_VERSION }}
      TAGS_DISTROLESS: >-
        --tag ${{ needs.prepare.outputs.IMAGE_GHCR }}:${{ needs.prepare.outputs.BORG_VERSION }}-distroless
        --tag ${{ needs.prepare.outputs.IMAGE_DOCKER }}:${{ needs.prepare.outputs.BORG_VERSION }}-distroless
      # Optional Major.Minor tag (e.g. borgbackup:1.2 / borgbackup:1.2-distroless)
      TAGS_MAJOR_MINOR: >-
        --tag ${{ needs.prepare.outputs.IMAGE_GHCR }}:${{ inputs.borg_version }}
        --tag ${{ needs.prepare.outputs.IMAGE_DOCKER }}:${{ inputs.borg_version }}
      TAGS_DISTROLESS_MAJOR_MINOR: >-
        --tag ${{ needs.prepare.outputs.IMAGE_GHCR }}:${{ inputs.borg_version }}-distroless
        --tag ${{ needs.prepare.outputs.IMAGE_DOCKER }}:${{ inputs.borg_version }}-distroless
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Include major.minor tags
        if: inputs.tag_major_minor == true
        run: |
          echo "TAGS=${{ env.TAGS }} ${{ env.TAGS_MAJOR_MINOR }}" >> $GITHUB_ENV
          echo "TAGS_DISTROLESS=${{ env.TAGS_DISTROLESS }} ${{ env.TAGS_DISTROLESS_MAJOR_MINOR }}" >> $GITHUB_ENV
      - name: Push all manifests
        run: |
          docker buildx imagetools create ${{ env.TAGS }} ${{ needs.build-push.outputs.IMAGES }}
          docker buildx imagetools create ${{ env.TAGS_DISTROLESS }} ${{ needs.build-push.outputs.DISTROLESS_IMAGES }}
